// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum otpReason {
  REGISTER
  FORGETPASSWORD
}

enum userType {
  ADMIN
  USER
}

enum orderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum paymentStatus {
  PENDING
  PAID
  REFUNDED
}


enum deviceType {
  ANDROID
  IOS
}


model Admin {

  id             String      @id @default(uuid())
  email          String   @unique
  password       String?
  name           String?
  deviceToken    String?
  userType       userType?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime?           @updatedAt
  categories Category[]
  products   Product[]

}

model Otp {
  id         String       @id @default(uuid())
  otp        String    @unique
  otpReason  otpReason
  email      String? 
  expiresAt  DateTime
  otpUsed    Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

}


model User{
  id             String      @id @default(uuid())
  email          String   @unique
    userType       userType?
  password       String?
  firstName       String?
  lastName       String?
  phoneNumber    String?
  userImage      String?
  deviceToken   String?
  deviceType   deviceType?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime?           @updatedAt

  favorites     Favorite[]
  recentViews   RecentView[]
  cart          Cart?
  orders        Order[]
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  createdBy Admin?   @relation(fields: [adminId], references: [id])
  adminId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  products  Product[]
}

model Product {
  id             String         @id @default(uuid())
  name           String
  description    String?
  price          Decimal        @db.Decimal(10, 2)
  currency       String         @default("PKR")
  stock          Int            @default(0)
  averageRating  Float          @default(0)
  ratingCount    Int            @default(0)
  isFeatured     Boolean        @default(false)
  category       Category?      @relation(fields: [categoryId], references: [id])
  categoryId     String?
  createdBy      Admin?         @relation(fields: [adminId], references: [id])
  adminId        String?
  images         ProductImage[]
  favorites      Favorite[]
  cartItems      CartItem[]
  orderItems     OrderItem[]
  recentViews    RecentView[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime?      @updatedAt
}

model ProductImage {
  id        String   @id @default(uuid())
  url       String
  isPrimary Boolean  @default(false)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
}

model Favorite {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}

model RecentView {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  viewedAt  DateTime @default(now())

  @@unique([userId, productId])
}

model Cart {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String     @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime?  @updatedAt
}

model CartItem {
  id          String   @id @default(uuid())
  cart        Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId      String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   String
  quantity    Int      @default(1)
  unitPrice   Decimal  @db.Decimal(10, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime? @updatedAt

  @@unique([cartId, productId])
}

model Order {
  id             String         @id @default(uuid())
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  status         orderStatus    @default(PENDING)
  paymentStatus  paymentStatus  @default(PENDING)
  totalAmount    Decimal        @db.Decimal(10, 2)
  shippingFee    Decimal        @db.Decimal(10, 2) @default(0)
  shippingAddress String?
  placedAt       DateTime       @default(now())
  updatedAt      DateTime?      @updatedAt
  items          OrderItem[]
}

model OrderItem {
  id         String   @id @default(uuid())
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId    String
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  quantity   Int      @default(1)
  unitPrice  Decimal  @db.Decimal(10, 2)
  subtotal   Decimal  @db.Decimal(10, 2)
  createdAt  DateTime @default(now())
  updatedAt  DateTime? @updatedAt
}
